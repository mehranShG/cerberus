var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.552,1,1.552]],["body/modules/AppModule.html",[0,2.097,1,2.761,2,1.333,3,1.815,4,2.147,5,2.147,6,2.39,7,0.053,8,2.45,9,1.8,10,1.8,11,0.485,12,0.485,13,0.406,14,2.675,15,2.923,16,1.105,17,1.013,18,2.675,19,2.147,20,2.147,21,1.54,22,2.675,23,2.675,24,2.675,25,2.45,26,2.675,27,0.571,28,2.675,29,2.675,30,2.675,31,2.675,32,2.675,33,1.161,34,2.675,35,1.333,36,2.675,37,2.147,38,2.675,39,1.54,40,2.675,41,2.675,42,1.8,43,2.147,44,0.485,45,0.199,46,0.036,47,0.036]],["title/controllers/AuthController.html",[48,1.552,49,1.552]],["body/controllers/AuthController.html",[7,0.053,11,0.35,12,0.35,13,0.293,16,1.14,17,0.731,27,0.616,42,1.299,44,0.35,45,0.143,46,0.028,47,0.028,48,1.112,49,1.661,50,1.55,51,1.931,52,1.299,53,0.413,54,1.941,55,3.83,56,2.772,57,3.075,58,1.721,59,1.931,60,2.885,61,1.931,62,1.141,63,1.931,64,2.323,65,2.476,66,1.55,67,2.143,68,2.885,69,1.931,70,1.931,71,1.661,72,1.661,73,1.661,74,1.55,75,2.143,76,1.661,77,1.931,78,1.931,79,1.931,80,1.931,81,1.931,82,2.885,83,3.83,84,1.931,85,1.112,86,1.55,87,1.55,88,0.838,89,1.55,90,1.112,91,1.931,92,1.931,93,0.962,94,1.55,95,1.307,96,1.299,97,1.931,98,1.931,99,1.55,100,1.299,101,3.453,102,0.838,103,1.931,104,1.931,105,2.323,106,1.931,107,1.931,108,1.931,109,1.931,110,1.931,111,1.55,112,1.931]],["title/entities/AuthEntity.html",[113,1.343,114,1.169]],["body/entities/AuthEntity.html",[7,0.052,11,0.441,12,0.441,13,0.369,16,0.848,27,0.911,35,1.962,39,1.401,44,0.441,45,0.181,46,0.033,47,0.033,53,0.52,58,2.126,62,1.409,65,1.401,113,1.699,114,1.479,115,1.953,116,1.126,117,3.16,118,2.649,119,3.16,120,3.425,121,3.16,122,2.432,123,1.699,124,3.16,125,2.432,126,1.962,127,3.16,128,2.432,129,3.16,130,2.432,131,2.294,132,3.409,133,3.409,134,1.401,135,1.637,136,2.432,137,1.637,138,3.409,139,2.294,140,2.432,141,3.409,142,2.432]],["title/modules/AuthModule.html",[0,1.552,6,1.343]],["body/modules/AuthModule.html",[0,2.016,2,1.259,3,1.745,6,2.455,7,0.053,8,2.355,9,1.7,10,1.7,11,0.458,12,0.458,13,0.383,15,2.028,16,1.225,17,0.957,20,2.028,21,1.455,42,2.355,43,2.81,44,0.458,45,0.188,46,0.034,47,0.034,49,2.313,88,1.096,95,1.784,96,1.7,114,1.519,143,2.028,144,2.028,145,2.349,146,2.526,147,2.526,148,2.526,149,2.526,150,1.7,151,2.526,152,2.526,153,2.526,154,2.526,155,2.526,156,2.028]],["title/injectables/AuthService.html",[95,1.021,157,1.021]],["body/injectables/AuthService.html",[7,0.053,11,0.197,12,0.197,13,0.165,16,0.995,17,0.411,21,0.625,25,1.227,27,0.59,33,0.791,35,1.663,37,1.893,44,0.197,45,0.081,46,0.018,47,0.018,52,1.227,53,0.232,54,1.227,56,2.218,57,2.218,62,1.018,64,2.504,65,2.593,66,1.464,67,1.663,71,1.591,72,1.591,73,1.591,74,1.464,75,1.663,76,1.921,86,0.872,87,0.872,88,0.791,89,0.872,93,0.541,94,0.872,95,0.691,100,1.587,102,1.68,105,1.859,111,2.218,114,0.791,118,2.386,123,1.175,131,1.227,134,0.625,135,2.832,137,2.386,139,2.386,150,0.731,157,0.691,158,0.625,159,0.872,160,2.763,161,1.824,162,1.227,163,1.086,164,3.546,165,2.358,166,3.546,167,1.086,168,1.824,169,1.086,170,2.763,171,1.824,172,1.824,173,1.086,174,1.086,175,1.227,176,2.763,177,1.535,178,2.763,179,2.763,180,1.086,181,1.824,182,1.464,183,1.086,184,1.086,185,1.086,186,2.358,187,1.086,188,2.358,189,0.872,190,1.086,191,1.086,192,1.086,193,1.086,194,1.086,195,1.086,196,1.086,197,3.336,198,1.824,199,0.731,200,1.824,201,1.824,202,1.464,203,1.464,204,1.464,205,1.824,206,2.358,207,1.824,208,1.086,209,1.464,210,1.086,211,1.086,212,1.824,213,1.086,214,1.824,215,1.086,216,1.086,217,1.086,218,0.731,219,1.086,220,1.086]],["title/injectables/JwtAuthGuard.html",[90,1.552,157,1.021]],["body/injectables/JwtAuthGuard.html",[7,0.051,11,0.65,12,0.65,13,0.544,16,1.095,17,1.357,44,0.65,45,0.266,46,0.043,47,0.043,90,2.534,157,1.666,158,2.064,221,2.878,222,2.878,223,3.585,224,2.412,225,2.878,226,3.585]],["title/injectables/JwtStrategy.html",[145,1.343,157,1.021]],["body/injectables/JwtStrategy.html",[7,0.053,11,0.421,12,0.421,13,0.352,16,1.14,17,0.878,27,0.704,33,1.006,44,0.421,45,0.172,46,0.032,47,0.032,53,0.495,54,2.217,62,1.089,64,1.56,65,1.898,71,1.898,72,1.898,73,1.898,76,1.335,95,1.736,96,1.56,99,1.861,100,1.56,102,1.43,105,1.56,135,2.58,137,1.56,139,1.56,145,1.642,156,1.861,157,1.248,158,1.335,162,1.56,182,2.645,189,1.861,199,1.56,209,1.861,218,1.56,224,1.56,225,1.861,227,1.861,228,3.295,229,2.318,230,2.318,231,3.295,232,2.318,233,2.318,234,3.295,235,2.318,236,2.318,237,2.318,238,1.861,239,1.335,240,2.318,241,2.318,242,2.318,243,2.318,244,2.318,245,2.318,246,2.318,247,2.318,248,1.861]],["title/interfaces/JwtValidateType.html",[239,1.552,249,1.552]],["body/interfaces/JwtValidateType.html",[7,0.05,11,0.62,12,0.62,13,0.519,27,0.913,33,2.119,44,0.62,46,0.042,47,0.042,53,0.73,116,1.412,123,2.324,126,2.324,239,2.461,248,3.921,249,1.969,250,3.419,251,2.744]],["title/classes/LoginDto.html",[45,0.2,67,1.343]],["body/classes/LoginDto.html",[7,0.052,11,0.55,12,0.55,13,0.46,16,0.985,27,0.846,35,2.196,44,0.55,45,0.294,46,0.039,47,0.039,53,0.648,58,1.973,62,1.308,67,1.973,85,1.746,116,1.308,126,2.328,177,2.196,252,1.746,253,2.434,254,2.434,255,3.032,256,3.032,257,3.032,258,3.178,259,3.178,260,2.04,261,3.538]],["title/classes/RegisterDto.html",[45,0.2,75,1.343]],["body/classes/RegisterDto.html",[7,0.052,11,0.429,12,0.429,13,0.359,16,0.831,27,0.828,33,1.929,35,2.215,44,0.429,45,0.248,46,0.033,47,0.033,53,0.505,58,1.932,62,1.28,75,1.666,85,1.361,116,1.104,126,2.3,177,1.932,252,1.361,254,1.898,258,2.683,259,3.112,260,1.591,261,3.382,262,1.898,263,2.364,264,2.364,265,4.213,266,4.213,267,3.342,268,3.342,269,3.342,270,3.342,271,3.342,272,2.364,273,2.364,274,3.342,275,3.342,276,2.364,277,2.364,278,2.364,279,2.364,280,3.342,281,3.342,282,2.364,283,2.364]],["title/classes/ResponseModel.html",[45,0.2,93,1.343]],["body/classes/ResponseModel.html",[7,0.052,11,0.518,12,0.518,13,0.433,27,0.914,44,0.518,45,0.212,46,0.037,47,0.037,53,0.61,62,1.507,71,1.645,72,1.645,73,1.645,93,1.896,116,1.257,123,1.896,162,1.922,202,3.815,203,4.005,204,4.005,252,1.645,284,2.293,285,3.805,286,3.805,287,2.856,288,3.805,289,2.856,290,2.856,291,2.856,292,2.856]],["title/entities/UserEntity.html",[88,1.169,113,1.343]],["body/entities/UserEntity.html",[7,0.052,11,0.399,12,0.399,13,0.333,16,0.789,25,2.504,27,0.962,33,1.615,39,1.265,44,0.399,45,0.163,46,0.031,47,0.031,52,2.504,53,0.469,58,2.244,62,1.487,88,1.376,102,1.376,113,1.581,114,1.768,116,1.048,117,2.988,118,2.504,119,2.988,120,3.271,121,2.988,123,1.581,124,2.988,126,2.031,127,3.469,129,2.988,134,1.265,177,1.855,199,2.134,293,1.764,294,2.197,295,3.171,296,3.171,297,2.197,298,2.197,299,2.197,300,2.197,301,2.197,302,2.197,303,2.197,304,3.171,305,3.171,306,2.197]],["title/coverage.html",[307,2.463]],["body/coverage.html",[7,0.051,13,0.413,27,0.582,45,0.31,46,0.036,47,0.036,48,1.569,49,1.569,50,2.187,67,1.358,75,1.358,76,1.569,88,1.182,90,1.569,93,1.358,95,1.032,113,1.837,114,1.182,115,2.187,145,1.358,157,1.582,159,2.187,221,2.187,222,2.187,227,2.187,239,1.569,249,1.569,251,2.187,253,2.187,262,2.187,284,2.187,293,2.187,307,1.833,308,2.724,309,2.724,310,2.724,311,5.138,312,3.686,313,2.724,314,2.724,315,4.178,316,4.477,317,2.187,318,2.724,319,2.187,320,2.724,321,2.724,322,2.724]],["title/dependencies.html",[3,1.613,323,1.814]],["body/dependencies.html",[3,1.41,7,0.053,17,1.071,19,2.271,21,1.629,45,0.281,46,0.037,47,0.037,85,1.629,131,1.903,134,1.629,150,1.903,218,1.903,224,1.903,238,3.419,260,1.903,324,4.546,325,2.829,326,2.829,327,2.829,328,2.829,329,2.829,330,2.829,331,2.829,332,2.829,333,2.829,334,2.829,335,2.829,336,2.829,337,2.829,338,2.829,339,2.829,340,2.829,341,2.829,342,2.829,343,2.829,344,2.829,345,2.829,346,2.829,347,2.829,348,2.829,349,2.829,350,2.829,351,2.829]],["title/miscellaneous/functions.html",[352,1.814,353,2.598]],["body/miscellaneous/functions.html",[7,0.046,46,0.046,47,0.046,53,0.848,317,3.188,319,3.995,352,3.188,353,3.188,354,3.971]],["title/index.html",[53,0.483,355,2.26,356,2.26]],["body/index.html",[7,0.052,46,0.037,47,0.037,102,1.245,175,1.931,177,1.43,307,1.931,357,2.87,358,2.304,359,2.304,360,2.87,361,2.87,362,2.87,363,4.995,364,2.87,365,3.817,366,3.817,367,2.87,368,2.87,369,2.87,370,2.87,371,2.87,372,4.895,373,2.87,374,2.87,375,3.817,376,2.87,377,2.87,378,2.87,379,2.87,380,3.817,381,3.817,382,2.87,383,2.87,384,2.87,385,2.304,386,2.304,387,2.304,388,2.87]],["title/modules.html",[2,1.824]],["body/modules.html",[1,2.241,2,1.94,6,1.94,7,0.045,46,0.045,47,0.045,389,4.625,390,4.625,391,4.625,392,4.625]],["title/overview.html",[393,2.938]],["body/overview.html",[1,2.75,2,1.602,3,2.048,4,2.58,5,2.58,6,2.558,7,0.048,8,2.765,9,2.163,10,2.163,39,1.851,46,0.04,47,0.04,48,1.851,95,1.716,143,2.58,144,2.58,145,2.258,158,1.851,249,1.851,252,1.851,393,2.58,394,4.11,395,4.11,396,4.11]],["title/properties.html",[116,1.069,323,1.814]],["body/properties.html",[7,0.051,46,0.044,47,0.044,102,1.635,116,1.245,175,2.535,358,3.025,359,3.025,385,3.025,386,3.025,387,3.025,397,3.768,398,3.768,399,3.768,400,3.768]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":398,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":336,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":395,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":327,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":394,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":325,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":339,"title":{},"body":{"dependencies.html":{}}}],["201",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["3",{"_index":396,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["5.1.0",{"_index":334,"title":{},"body":{"dependencies.html":{}}}],["6.1.4",{"_index":332,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":324,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":333,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":367,"title":{},"body":{"index.html":{}}}],["api",{"_index":359,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apibearerauth",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@apioperation({summary",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation({summary",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":261,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isemail",{"_index":254,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isstring",{"_index":256,"title":{},"body":{"classes/LoginDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@maxlength(20)@matches(/(?=.*[a",{"_index":264,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@maxlength(20)@matches(/^[a",{"_index":273,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apitags",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('authentication",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":370,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":135,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["atleast",{"_index":268,"title":{},"body":{"classes/RegisterDto.html":{}}}],["auth",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["auth.controller",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.entity",{"_index":306,"title":{},"body":{"entities/UserEntity.html":{}}}],["auth.password",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.service",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":49,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":358,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authentity",{"_index":114,"title":{"entities/AuthEntity.html":{}},"body":{"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["authguard",{"_index":223,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":226,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":385,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authrepository",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice",{"_index":95,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":139,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["bcrypt",{"_index":131,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":140,"title":{},"body":{"entities/AuthEntity.html":{}}}],["bcrypt.hash(password",{"_index":142,"title":{},"body":{"entities/AuthEntity.html":{}}}],["beforeinsert",{"_index":132,"title":{},"body":{"entities/AuthEntity.html":{}}}],["beforeupdate",{"_index":133,"title":{},"body":{"entities/AuthEntity.html":{}}}],["body",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":288,"title":{},"body":{"classes/ResponseModel.html":{}}}],["bootstrap",{"_index":319,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":392,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":389,"title":{},"body":{"modules.html":{}}}],["capital",{"_index":270,"title":{},"body":{"classes/RegisterDto.html":{}}}],["cascade",{"_index":296,"title":{},"body":{"entities/UserEntity.html":{}}}],["cerberus",{"_index":357,"title":{},"body":{"index.html":{}}}],["class",{"_index":45,"title":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":252,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResponseModel.html":{}}}],["column",{"_index":127,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["comparepassword",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparing",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":137,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/ResponseModel.html":{}}}],["constructor(authservice",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(success",{"_index":285,"title":{},"body":{"classes/ResponseModel.html":{}}}],["constructor(userrepository",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["contain",{"_index":267,"title":{},"body":{"classes/RegisterDto.html":{}}}],["controller",{"_index":48,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('auth",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["coverage",{"_index":307,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created_at",{"_index":117,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["createdatecolumn",{"_index":121,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["database",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["date",{"_index":120,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["decorators",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{}}}],["defined",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":371,"title":{},"body":{"index.html":{}}}],["digits",{"_index":275,"title":{},"body":{"classes/RegisterDto.html":{}}}],["dist/**/*.entity.js",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dtos/login.dto",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/register.dto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":382,"title":{},"body":{"index.html":{}}}],["eager",{"_index":295,"title":{},"body":{"entities/UserEntity.html":{}}}],["email",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{},"index.html":{}}}],["entities",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"entities/AuthEntity.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entities/auth.entity",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities/user.entity",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["entity",{"_index":113,"title":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["env",{"_index":366,"title":{},"body":{"index.html":{}}}],["example",{"_index":365,"title":{},"body":{"index.html":{}}}],["existing",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{}}}],["express",{"_index":331,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":225,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["files",{"_index":368,"title":{},"body":{"index.html":{}}}],["finduser",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.auth.password",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.id",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":361,"title":{},"body":{"index.html":{}}}],["function",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":353,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getall",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["getallusers",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{}}}],["gets",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":355,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyid(id",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["guard",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard.ts",{"_index":222,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["guards/jwt",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["hashed",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(password",{"_index":136,"title":{},"body":{"entities/AuthEntity.html":{}}}],["host",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["id",{"_index":118,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["identifier",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{}}}],["imports",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["index",{"_index":53,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{}}}],["injectable",{"_index":157,"title":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["injectables",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["injectrepository",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(authentity",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(userentity",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":362,"title":{},"body":{"index.html":{}}}],["installremove",{"_index":364,"title":{},"body":{"index.html":{}}}],["interface",{"_index":249,"title":{"interfaces/JwtValidateType.html":{}},"body":{"interfaces/JwtValidateType.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":250,"title":{},"body":{"interfaces/JwtValidateType.html":{}}}],["isemail",{"_index":258,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":259,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["joincolumn",{"_index":304,"title":{},"body":{"entities/UserEntity.html":{}}}],["jwt",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":90,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":145,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtvalidatetype",{"_index":239,"title":{"interfaces/JwtValidateType.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"coverage.html":{}}}],["letter",{"_index":271,"title":{},"body":{"classes/RegisterDto.html":{}}}],["license",{"_index":399,"title":{},"body":{"properties.html":{}}}],["local",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login'})@post('login",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":67,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":277,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/(?=.*[a",{"_index":283,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^[a",{"_index":282,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":278,"title":{},"body":{"classes/RegisterDto.html":{}}}],["maxlength(20",{"_index":281,"title":{},"body":{"classes/RegisterDto.html":{}}}],["mehran",{"_index":386,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mehranfmpx@gmail.com",{"_index":388,"title":{},"body":{"index.html":{}}}],["message",{"_index":266,"title":{},"body":{"classes/RegisterDto.html":{}}}],["metadata",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["minlength",{"_index":279,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(4",{"_index":280,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":352,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":375,"title":{},"body":{"index.html":{}}}],["model",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["mysql",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/ResponseModel.html":{}}}],["nest",{"_index":360,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":326,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":328,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":224,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":330,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["new",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":363,"title":{},"body":{"index.html":{}}}],["number",{"_index":123,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"interfaces/JwtValidateType.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{}}}],["one",{"_index":269,"title":{},"body":{"classes/RegisterDto.html":{}}}],["onetoone",{"_index":305,"title":{},"body":{"entities/UserEntity.html":{}}}],["onetoone(undefined",{"_index":294,"title":{},"body":{"entities/UserEntity.html":{}}}],["optional",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/ResponseModel.html":{}}}],["out",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["overview",{"_index":393,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":323,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/ResponseModel.html":{}}}],["parseint(process.env.db_port",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["passport",{"_index":238,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":242,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["payload",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["port",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["primarygeneratedcolumn",{"_index":124,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["private",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["privatekey",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.db_database",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_host",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_username",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":377,"title":{},"body":{"index.html":{}}}],["promise",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["properties",{"_index":116,"title":{"properties.html":{}},"body":{"entities/AuthEntity.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"properties.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["readonly",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["reflect",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":75,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registerdto.email",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto.password",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto.username",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["requires",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["response",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["responsemodel",{"_index":93,"title":{"classes/ResponseModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResponseModel.html":{},"coverage.html":{}}}],["result",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResponseModel.html":{}}}],["results",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["returns",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["rimraf",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":372,"title":{},"body":{"index.html":{}}}],["running",{"_index":369,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":138,"title":{},"body":{"entities/AuthEntity.html":{}}}],["secretorkey",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["shahbaz",{"_index":387,"title":{},"body":{"index.html":{},"properties.html":{}}}],["source",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{}}}],["src/.../main.ts",{"_index":354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":14,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:17",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:11",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:18",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/dtos/login.dto.ts",{"_index":253,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/dtos/login.dto.ts:11",{"_index":257,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dtos/login.dto.ts:7",{"_index":255,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dtos/register.dto.ts",{"_index":262,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/dtos/register.dto.ts:14",{"_index":276,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/dtos/register.dto.ts:23",{"_index":272,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/dtos/register.dto.ts:7",{"_index":263,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/entities/auth.entity",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/entities/auth.entity.ts",{"_index":115,"title":{},"body":{"entities/AuthEntity.html":{},"coverage.html":{}}}],["src/entities/auth.entity.ts:10",{"_index":125,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:13",{"_index":128,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:16",{"_index":122,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:19",{"_index":130,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/user.entity",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/entities/user.entity.ts",{"_index":293,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:12",{"_index":300,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:15",{"_index":303,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:18",{"_index":299,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:21",{"_index":302,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:25",{"_index":298,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/entities/user.entity.ts:9",{"_index":301,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/guards/jwt",{"_index":221,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":317,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/types/auth.types",{"_index":240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/types/auth.types.ts",{"_index":251,"title":{},"body":{"interfaces/JwtValidateType.html":{},"coverage.html":{}}}],["src/types/response.model.ts",{"_index":284,"title":{},"body":{"classes/ResponseModel.html":{},"coverage.html":{}}}],["src/types/response.model.ts:2",{"_index":289,"title":{},"body":{"classes/ResponseModel.html":{}}}],["src/types/response.model.ts:3",{"_index":287,"title":{},"body":{"classes/ResponseModel.html":{}}}],["src/types/response.model.ts:4",{"_index":286,"title":{},"body":{"classes/ResponseModel.html":{}}}],["start",{"_index":373,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":376,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":378,"title":{},"body":{"index.html":{}}}],["started",{"_index":356,"title":{"index.html":{}},"body":{}}],["statements",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["strategy",{"_index":237,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":126,"title":{},"body":{"entities/AuthEntity.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{}}}],["success",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResponseModel.html":{}}}],["summary",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":390,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":391,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":381,"title":{},"body":{"index.html":{}}}],["test:covcontact",{"_index":384,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":383,"title":{},"body":{"index.html":{}}}],["tests",{"_index":380,"title":{},"body":{"index.html":{}}}],["this.authservice.getall",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getuserbyid(payload.id",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.login(logindto",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.code",{"_index":292,"title":{},"body":{"classes/ResponseModel.html":{}}}],["this.jwtservice.signasync",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":141,"title":{},"body":{"entities/AuthEntity.html":{}}}],["this.result",{"_index":291,"title":{},"body":{"classes/ResponseModel.html":{}}}],["this.success",{"_index":290,"title":{},"body":{"classes/ResponseModel.html":{}}}],["this.userrepository.find",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findoneby",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.save(user",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["token",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":335,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["true})@joincolumn",{"_index":297,"title":{},"body":{"entities/UserEntity.html":{}}}],["type",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["typeorm",{"_index":134,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":329,"title":{},"body":{"dependencies.html":{}}}],["types/response.model",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unit",{"_index":379,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":400,"title":{},"body":{"properties.html":{}}}],["updated_at",{"_index":119,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["updatedatecolumn",{"_index":129,"title":{},"body":{"entities/AuthEntity.html":{},"entities/UserEntity.html":{}}}],["useguards",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"index.html":{},"properties.html":{}}}],["user'})@post('register",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.auth",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{}}}],["user.username",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user_id",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{}}}],["userentity",{"_index":88,"title":{"entities/UserEntity.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["username",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/JwtValidateType.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{}}}],["userrepository",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users'})@get",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":260,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["version",{"_index":397,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":374,"title":{},"body":{"index.html":{}}}],["z",{"_index":265,"title":{},"body":{"classes/RegisterDto.html":{}}}],["za",{"_index":274,"title":{},"body":{"classes/RegisterDto.html":{}}}],["zoom",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthModule } from './auth/auth.module'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: ['dist/**/*.entity.js'],\n      synchronize: true,\n    }),\n    AuthModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUsers\n                            \n                            \n                                login\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \ngetAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@ApiOperation({summary: 'Get all existing users'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Login'})@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Register new user'})@Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common'\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { LoginDto } from '../dtos/login.dto'\nimport { RegisterDto } from '../dtos/register.dto'\nimport { UserEntity } from '../entities/user.entity'\nimport { JwtAuthGuard } from '../guards/jwt-guard'\nimport { ResponseModel } from '../types/response.model'\nimport { AuthService } from './auth.service'\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Register new user' })\n  @Post('register')\n  register(@Body() registerDto: RegisterDto): Promise {\n    return this.authService.register(registerDto)\n  }\n\n  @ApiOperation({ summary: 'Login' })\n  @Post('login')\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto)\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ summary: 'Get all existing users' })\n  @Get()\n  getAllUsers(): Promise {\n    return this.authService.getAll()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AuthEntity.html":{"url":"entities/AuthEntity.html","title":"entity - AuthEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AuthEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/auth.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt'\nimport {\n    BeforeInsert, BeforeUpdate, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn,\n    UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class AuthEntity {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  password: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword(password: string): Promise {\n    const salt = await bcrypt.genSalt()\n    this.password = await bcrypt.hash(password || this.password, salt)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthEntity } from 'src/entities/auth.entity'\nimport { UserEntity } from 'src/entities/user.entity'\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { JwtStrategy } from './jwt.strategy'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, AuthEntity]),\n    JwtModule.register({ privateKey: process.env.JWT_SECRET }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, authRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n                    Gets all users in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise of users array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:88\n                \n            \n\n\n            \n                \n                    Gets a user by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise of an user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n                    Login\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        requires email and password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a Promise of response model\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n                    Register new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        requires username email and password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        a Promise of response model\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt'\nimport { Repository } from 'typeorm'\nimport { Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { LoginDto } from '../dtos/login.dto'\nimport { RegisterDto } from '../dtos/register.dto'\nimport { AuthEntity } from '../entities/auth.entity'\nimport { UserEntity } from '../entities/user.entity'\nimport { ResponseModel } from '../types/response.model'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    @InjectRepository(AuthEntity)\n    private readonly authRepository: Repository,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Register new user\n   * @param registerDto requires username email and password\n   * @returns a Promise of response model\n   */\n  async register(registerDto: RegisterDto): Promise {\n    const user = new UserEntity()\n    user.username = registerDto.username\n    user.email = registerDto.email\n    const auth = new AuthEntity()\n    auth.password = registerDto.password\n    user.auth = auth\n    await this.userRepository.save(user)\n    const token = await this.jwtService.signAsync(\n      { id: user.id },\n      { expiresIn: '1h' },\n    )\n    return { success: true, result: token, code: 201 }\n  }\n\n  /**\n   * Login\n   * @param loginDto requires email and password\n   * @returns a Promise of response model\n   */\n  async login(loginDto: LoginDto): Promise {\n    const findUser = await this.userRepository.findOneBy({\n      email: loginDto.email,\n    })\n    if (!findUser) {\n      throw new NotFoundException()\n    }\n    // Comparing password with hashed password in database\n    const hashedPassword = findUser.auth.password\n    const comparePassword = await bcrypt.compare(\n      loginDto.password,\n      hashedPassword,\n    )\n    if (!comparePassword) {\n      throw new UnauthorizedException()\n    }\n    // Assigning jwt token to user\n    const token = await this.jwtService.signAsync(\n      { id: findUser.id },\n      { expiresIn: '1h' },\n    )\n    return {\n      success: true,\n      result: { user: findUser, token: token },\n      code: 201,\n    }\n  }\n\n  /**\n   * Gets all users in database\n   * @returns Promise of users array\n   */\n  async getAll(): Promise {\n    return await this.userRepository.find()\n  }\n\n  /**\n   * Gets a user by id\n   * @param id\n   * @returns Promise of an user\n   */\n  async getUserById(id: number): Promise {\n    return await this.userRepository.findOneBy({ id })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/jwt-guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { config } from 'dotenv'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { JwtValidateType } from 'src/types/auth.types'\nimport { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { AuthService } from './auth.service'\n\nconfig()\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    })\n  }\n  async validate(payload: any): Promise {\n    const user = await this.authService.getUserById(payload.id)\n    if (!user) {\n      throw new UnauthorizedException()\n    }\n    return { user_id: user.id, username: user.username }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtValidateType.html":{"url":"interfaces/JwtValidateType.html","title":"interface - JwtValidateType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtValidateType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/auth.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user_id\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtValidateType {\n  user_id: number\n  username: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/login.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsString()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/register.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@MaxLength(20)@Matches(/(?=.*[A-Z])/, {message: 'password must contain atleast one capital letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/register.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@MaxLength(20)@Matches(/^[a-zA-Z\\-]+$/, {message: 'username should Not have any digits'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class RegisterDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/^[a-zA-Z\\-]+$/, { message: 'username should Not have any digits' })\n  username: string\n\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/(?=.*[A-Z])/, {\n    message: 'password must contain atleast one capital letter',\n  })\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseModel.html":{"url":"classes/ResponseModel.html","title":"class - ResponseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/response.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                result\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(success, result, code)\n                    \n                \n                        \n                            \n                                Defined in src/types/response.model.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        success\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        result\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/types/response.model.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/types/response.model.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/types/response.model.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ResponseModel {\n  success: boolean\n  result: any\n  code: number\n  constructor(success, result, code) {\n    this.success = success\n    this.result = result\n    this.code = code\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                auth\n                            \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                updated_at\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.id, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn\n} from 'typeorm'\nimport { AuthEntity } from './auth.entity'\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  email: string\n\n  @Column()\n  username: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n\n  @OneToOne(() => AuthEntity, (user) => user.id, { eager: true, cascade: true })\n  @JoinColumn()\n  auth: AuthEntity\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entities/auth.entity.ts\n            \n            entity\n            AuthEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/jwt-guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/types/auth.types.ts\n            \n            interface\n            JwtValidateType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/response.model.ts\n            \n            class\n            ResponseModel\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCerberus\n\nDescription\nUser authentication API with Nest framework\nInstallation\n$ npm installremove example from .env example to access .env files\nRunning the app\n# development\n$ npm run start\n# watch mode\n$ npm run start:dev\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n# e2e tests\n$ npm run test:e2e\n# test coverage\n$ npm run test:covContact Me\n\nAuthor - Mehran Shahbaz\nEmail - mehranfmpx@gmail.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : User authentication API\n        \n            License : UNLICENSED\n        \n            Author : Mehran Shahbaz\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
